import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { ResponsiveLine } from '@nivo/line';

export default function LineChart() {
  const [expenseData, setExpenseData] = useState([]);

  useEffect(() => {
    const fetchExpenseDetails = async () => {
      try {
        const response = await axios.get('http://localhost:9004/manager/all');
        const data = response.data;

        const formattedData = formatDataForLineChart(data);
        setExpenseData(formattedData);
      } catch (error) {
        console.error('Error fetching expense details:', error);
      }
    };

    fetchExpenseDetails();
  }, []);

  const formatDataForLineChart = (data) => {
    const series = {};

    data.forEach((item) => {
      const empid = item.empid;
      const exptype = item.exptype1;
      const amount = item.amount;

      if (!series[empid]) {
        series[empid] = {
          id: empid,
          data: [],
        };
      }
    const index = series[empid].data.findIndex((point)=>point.x === exptype);
    if(index !== -1){
        series[empid].data[index].y+=amount;
    }
    else{
        series[empid].data.push({x:exptype,y:amount});
    }
    series[empid].data.sort((a,b) => (a.x <b.x ? -1:1));
    });
    

    const formattedData = Object.values(series);

    return formattedData;
  };

  return (
    <div>
      <h2>Employee Expense Trends</h2>
      <div style={{ height: '400px' }}>
        <ResponsiveLine
          data={expenseData}
          margin={{ top: 50, right: 110, bottom: 50, left: 60 }}
          xScale={{ type: 'point' }}
          yScale={{ type: 'linear', min: 'auto', max: 'auto', stacked: false, reverse: false }}
          axisBottom={{
            orient: 'bottom',
            tickSize: 5,
            tickPadding: 5,
            tickRotation: 0,
            legend: 'Expense Type',
            legendOffset: 36,
            legendPosition: 'middle',
          }}
          axisLeft={{
            orient: 'left',
            tickSize: 5,
            tickPadding: 5,
            tickRotation: 0,
            legend: 'Amount Spent',
            legendOffset: -40,
            legendPosition: 'middle',
          }}
          colors={{ scheme: 'category10' }}
          enableGridX={false}
          enableGridY={true}
          lineWidth={3}
          pointSize={6}
          pointBorderWidth={3}
          pointBorderColor={{ from: 'serieColor' }}
          pointLabelYOffset={-12}
          useMesh={true}
        />
      </div>
    </div>
  );
}
